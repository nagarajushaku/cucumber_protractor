"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MochaAdapter = void 0;
const model_1 = require("@serenity-js/core/lib/model");
const fs = require("fs");
const path = require("path"); // eslint-disable-line unicorn/import-style
/**
 * @desc
 *  Allows for programmatic execution of Mocha test scenarios,
 *  using {@link SerenityReporterForMocha} to report progress.
 *
 * @implements {@serenity-js/core/lib/io~TestRunnerAdapter}
 */
class MochaAdapter {
    /**
     * @desc
     *  test
     * @param {MochaConfig} config
     * @param {@serenity-js/core/lib/io~ModuleLoader} loader
     */
    constructor(config, loader) {
        this.config = config;
        this.loader = loader;
    }
    /**
     * @desc
     *  Scenario success threshold for this test runner.
     *
     * @returns {Outcome | { Code: number }}
     */
    successThreshold() {
        return model_1.ExecutionIgnored;
    }
    /**
     * @param {string[]} pathsToScenarios
     * @returns {Promise<void>}
     */
    run(pathsToScenarios) {
        return new Promise((resolve, reject) => {
            this.requireAny(this.config.require);
            const Mocha = this.loader.require('mocha'), mocha = new Mocha({
                ...this.config,
                reporter: require.resolve('../index'),
            });
            mocha.files = pathsToScenarios;
            mocha.loadFilesAsync()
                .then(() => mocha.run(numberOfFailures => resolve()));
        });
    }
    requireAny(filesOrModules) {
        const requires = filesOrModules
            ? [].concat(filesOrModules).filter(item => !!item)
            : [];
        requires.forEach(fileOrModule => {
            const required = fs.existsSync(fileOrModule) || fs.existsSync(`${fileOrModule}.js`)
                ? path.resolve(fileOrModule) // local file
                : fileOrModule; // module
            require(required);
        });
    }
}
exports.MochaAdapter = MochaAdapter;
//# sourceMappingURL=MochaAdapter.js.map